package com.vulinh.utils;

import com.querydsl.core.types.Predicate;
import com.vulinh.data.base.AbstractIdentifiable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.querydsl.QuerydslPredicateExecutor;
import org.springframework.lang.NonNull;
import org.springframework.lang.Nullable;

/// A generic service interface for handling paginated queries using QueryDSL.
///
/// @param <E> The type of the JPA entity. This type must extend [AbstractIdentifiable] and is expected to be an entity
/// managed by the repository provided in [#getDslRepository()].
/// @param <D> The type of the Data Transfer Object (DTO) to which the entity will be converted.
/// @param <S> The type of the search criteria object used to build the query predicate.
public interface PageableQueryService<E extends AbstractIdentifiable<?>, D, S> {

  /// Converts a given entity instance into its corresponding DTO representation.
  ///
  /// Implementations typically delegate this conversion to a dedicated mapper component, such as one generated by
  /// MapStruct or configured with ModelMapper.
  ///
  /// @param entity The non-null entity to convert.
  /// @return The non-null DTO representation of the entity.
  @NonNull
  D toDto(@NonNull E entity);

  /// Builds a QueryDSL [Predicate] from the given search criteria object.
  ///
  /// Implementations can return `null` if the search criteria should result in no filtering (i.e., match all records).
  /// The default [#search(Object,Pageable)] method handles a null predicate gracefully.
  ///
  /// @param searchCriteria The non-null object containing search parameters.
  /// @return A [Predicate] for filtering, or `null` if no specific filtering is needed.
  @Nullable
  Predicate toPredicate(@NonNull S searchCriteria);

  /// Provides the repository instance that supports QueryDSL predicate execution.
  ///
  /// @return The non-null [QuerydslPredicateExecutor] repository instance for the entity `E`.
  @NonNull
  QuerydslPredicateExecutor<E> getDslRepository();

  /// Performs a paginated search based on the provided search criteria.
  ///
  /// This default method run the search query by:
  ///
  /// - Building a [Predicate] from the `searchCriteria` using [#toPredicate(Object)].
  ///
  /// - Executing the query against the repository provided by [#getDslRepository()].
  ///
  /// - Mapping the resulting `Page` of entities to a `Page` of DTOs using [#toDto(AbstractIdentifiable)].
  ///
  /// @param searchCriteria The non-null object containing search parameters.
  /// @param pageable The non-null pagination information (page number, size, sorting).
  /// @return A non-null [Page] of DTOs matching the criteria.
  @NonNull
  default Page<D> search(@NonNull S searchCriteria, @NonNull Pageable pageable) {
    var predicate = toPredicate(searchCriteria);

    return getDslRepository()
        .findAll(predicate == null ? PredicateBuilder.always() : predicate, pageable)
        .map(this::toDto);
  }
}
