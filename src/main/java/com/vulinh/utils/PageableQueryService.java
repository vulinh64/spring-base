package com.vulinh.utils;

import com.querydsl.core.types.Predicate;
import com.vulinh.data.base.AbstractIdentifiable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.querydsl.QuerydslPredicateExecutor;
import org.springframework.lang.NonNull;
import org.springframework.lang.Nullable;

/**
 * A generic service interface for handling paginated queries using QueryDSL.
 *
 * @param <E> The type of the JPA entity. This type must extend {@link AbstractIdentifiable} and is
 *     expected to be an entity managed by the repository provided in {@link #getDslRepository()}.
 * @param <D> The type of the Data Transfer Object (DTO) to which the entity will be converted.
 * @param <S> The type of the search criteria object used to build the query predicate.
 */
public interface PageableQueryService<E extends AbstractIdentifiable<?>, D, S> {

  /**
   * Converts a given entity instance into its corresponding DTO representation.
   *
   * <p>Implementations typically delegate this conversion to a dedicated mapper component, such as
   * one generated by MapStruct or configured with ModelMapper.
   *
   * @param entity The non-null entity to convert.
   * @return The non-null DTO representation of the entity.
   */
  @NonNull
  D toDto(@NonNull E entity);

  /**
   * Builds a QueryDSL {@link Predicate} from the given search criteria object.
   *
   * <p>Implementations can return {@code null} if the search criteria should result in no filtering
   * (i.e., match all records). The default {@link #search(Object, Pageable)} method handles a null
   * predicate gracefully.
   *
   * @param searchCriteria The non-null object containing search parameters.
   * @return A {@link Predicate} for filtering, or {@code null} if no specific filtering is needed.
   */
  @Nullable
  Predicate toPredicate(@NonNull S searchCriteria);

  /**
   * Provides the repository instance that supports QueryDSL predicate execution.
   *
   * @return The non-null {@link QuerydslPredicateExecutor} repository instance for the entity
   *     {@code E}.
   */
  @NonNull
  QuerydslPredicateExecutor<E> getDslRepository();

  /**
   * Performs a paginated search based on the provided search criteria.
   *
   * <p>This default method run the search query by:
   *
   * <ol>
   *   <li>Building a {@link Predicate} from the {@code searchCriteria} using {@link
   *       #toPredicate(Object)}.
   *   <li>Executing the query against the repository provided by {@link #getDslRepository()}.
   *   <li>Mapping the resulting {@code Page} of entities to a {@code Page} of DTOs using {@link
   *       #toDto(AbstractIdentifiable)}.
   * </ol>
   *
   * @param searchCriteria The non-null object containing search parameters.
   * @param pageable The non-null pagination information (page number, size, sorting).
   * @return A non-null {@link Page} of DTOs matching the criteria.
   */
  @NonNull
  default Page<D> search(@NonNull S searchCriteria, @NonNull Pageable pageable) {
    var predicate = toPredicate(searchCriteria);

    return getDslRepository()
        .findAll(predicate == null ? PredicateBuilder.always() : predicate, pageable)
        .map(this::toDto);
  }
}
