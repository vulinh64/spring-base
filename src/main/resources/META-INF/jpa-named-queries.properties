################################################################################
# If you're using IntelliJ Ultimate Edition, start by creating your SQL or JPQL
# queries directly in the repository classes with the help of IntelliJ's
# auto-complete feature and the @Query(value = "your-query-here") annotation.
# Once your queries are validated, you can then externalize them to the
# jpa-named-queries.properties file in your Spring Boot application
# (specifically, resources/META-INF folder) to reduce errors and maintain
# cleaner code.
################################################################################

#
# Find post revisions via post ID
# Remember to change the FQCN of PostRevisionDTO if you planned to move this class
# to another package.
#
find-post-revisions-by-post-id=select new com.vulinh.data.dto.projection.PostRevisionProjection\
  (pr.id.postId, \
  pr.id.revisionNumber, \
  pr.revisionType, \
  pr.title, \
  pr.slug, \
  pr.excerpt, \
  left(pr.postContent,50)||'...', \
  pr.authorId, \
  pr.categoryId, \
  pr.tags, \
  pr.revisionCreatedDate, \
  pr.revisionCreatedBy) \
  from PostRevision pr inner join Post p on pr.id.postId = p.id \
  where p.id = :postId

#
# Find posts without fetching their contents
#
find-prefetched-posts=select \
  p.id as id, p.title as title, \
  p.excerpt as excerpt, \
  p.slug as slug, \
  p.createdDate as createdDate, \
  p.updatedDate as updatedDate, \
  p.author as author, \
  p.category as category \
  from Post p